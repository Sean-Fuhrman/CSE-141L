SETI 1
MOVE R0 R2
LSLI 5
MOVE R0 R2
SUBI 2      // R2 now stores 30
MOVE R1 R2
MOVE R0 R3  //put i into RO
CMP
BEA 7       //end program if i == 30
ADD         // add i and 30 together (already in R1 R0)
LOAD R7 R2   //LOAD mem from [30 + i]
MOVE R0 R2
ADDI 1
LOAD R6 R2   //LOAD mem from [30 + 1 + i]
FLAG R0 R6   //get parity of upperhalf (p8)
LSLI 1
MOVE R5 R2   //R5 contains (0,0,0,p8,0,0,0,0) Now start p4
MOVE R0 R6   //put upperhalf in R0
LSRI 4        //isolate (0,0,0,0, d11 - d8) 
MOVE R1 R2
MOVE R0 R7   //put lowerhalf in R0
LSRI 4
MOVE R0 R2
LSLI 4      // isolate (d4,d4,d2,p4,0,0,0,0)
MOVE R0 R2
XOR         // R2 contains (d4-d2, p4, d11 - d8) aka parity group 4
FLAG R0 R2      // get parity of grpup 4 (already in correct spot)
MOVE R1 R5
XOR
MOVE R5 R2      //p4 now in R5 (0,0,0,p8,p4,0,0,0) Now start p2
SETI 3
MOVE R0 R2
LSLI 4
MOVE R0 R2
SETI 3
MOVE R1 R2
XOR
MOVE R0 R2
LSLI 2             
MOVE R4 R2      //R4 now holds 00110011 mask
MOVE R0 R6      //put upperhalf R0
MOVE R1 R4      //put mask in R1
AND
MOVE R4 R2      //Put p2 bits from upperhalf in r4
MOVE R0 R7
AND             //p2 bits from lower half now in R2
MOVE R0 R2
LSRI 2
MOVE R0 R2
MOVE R1 R4
XOR             //bits for parity group p2 now in R2
FLAG R0 R2
LSRI 1
MOVE R0 R2
MOVE R1 R5
XOR             // p2 now in R5 (0,0,0,p8,p4,p2,0,0)
MOVE R5 R2
SETI 2
MOVE R0 R2
MOVE R1 R2
LSLI 2
MOVE R0 R2
XOR
MOVE R0 R2
LSLI 2
MOVE R0 R2
XOR 
MOVE R0 R2
LSLI 2
MOVE R0 R2
XOR             //Mask (10101010) now in R2
MOVE R4 R2
MOVE R0 R6      //put upperhalf R0
MOVE R1 R4      //put mask in R1
AND
MOVE R4 R2      //put p1 bits from upperhalf in r4
MOVE R0 R7
AND
MOVE R0 R2
LSRI 1
MOVE R0 R2
MOVE R1 R4
XOR             //combine parity bits from p1 group into R2
FLAG R0 R2
LSRI 2
MOVE R0 R2
MOVE R1 R5
XOR
MOVE R5 R2       //p1 now in R5 (0,0,0,p8,p4,p2,p1,0) Now calculate p0
FLAG R0 R6 
FLAG R1 R7
XOR              // R2 now holds (0,0,0,0,p0,0,0,0)
MOVE R0 R2
LSRI 3
MOVE R0 R2
MOVE R1 R5
XOR
MOVE R5 R2       //R5 now has (0,0,0,p8,p4,p2,p1,p0)
SETI 0
MOVE R1 R2
MOVE R0 R5
CMP
BEA 2             //Branch if no error, else errors //TODO branch to store
SETI 1
MOVE R0 R2 
MOVE R1 R5
AND                 //R2 now has (0,0,0,0,0,0,0,p0)
MOVE R0 R2
SETI 0
MOVE R1 R2
CMP                 //If compare is true, there are 2 errors
BNA 1               
SETI 7
MOVE R0 R2
LSLI 5
MOVE R4 R2
MOVE R0 R3
ADDI 1
STORE R2 R4
BUN 3            
MOVE R0 R5          //LINE FOR BRANCH 1, if we make it here => 1 error
LSRI 1              
MOVE R0 R2
LSRI 3              //R2 contains (0,0,0,0,0,0,0,p8) if p8 is 1, we know error is in upperhalf (r6)
MOVE R0 R2
SETI 1
MOVE R1 R2
CMP                 
BEA 4               //branch to similar strategy with r6 if true
MOVE R0 R5
LSLI 4
MOVE R0 R2
LSRI 5              //isolate (0,0,0,0,0,p4,p2,p1)
MOVE R1 R2
SETI 1
MOVE R0 R2
LSL 
MOVE R1 R2
MOVE R0 R7
XOR
MOVE R7 R2
BUN 6
MOVE R0 R5          //LINE FOR BRANCH 4
LSLI 4
MOVE R0 R2
LSRI 5              //isolate (0,0,0,0,0,p4,p2,p1)
MOVE R1 R2
SETI 1
MOVE R0 R2
LSL 
MOVE R1 R2
MOVE R0 R6
XOR
MOVE R6 R2
SETI 1              //LOCATION FOR BRANCH 6
MOVE R0 R2          
LSLI 6
MOVE R1 R2
MOVE R0 R6          //LOCATION FOR BRANCH 2, FROM HERE TO NEXT COMMENT IS CODE TO STORE D11 to D8 [R1 contains F1 F0 in MSBs]
LSRI 5
MOVE R0 R2
XOR                 //R2 Now has data to be stored in MSW
MOVE R4 R2
MOVE R0 R3
ADDI 1
STORE R2 R4
MOVE R0 R7
LSLI 4
MOVE R0 R2
LSRI 7
MOVE R4 R2
MOVE R0 R7
LSRI 5
MOVE R0 R2
LSLI 1
MOVE R0 R2
MOVE R1 R4
XOR         //R2 now has (0,0,0,0,d4,d3,d2,d1)
MOVE R0 R6
MOVE R1 R2
LSRI 1
MOVE R0 R2
LSLI 4
MOVE R0 R2
XOR         //R2 now has (d8 : d1)
MOVE R4 R2
STORE R3 R4   //END OF STORE CODE
MOVE R0 R3              //LOCATION FOR BRANCH 3 Update i
ADDI 2
MOVE R3 R2
BUN 0                   //reset loop