SETI 1
MOVE R0 R2 
LSLI 5 // R2 now stores 32
MOVE R0 R2
MOVE R1 R3 
CMP
BEA 3 // if i == 32 progress to stage 2
SETI 0 
LOAD R6 R3 // load current byte we are looking at into R6
SETI 4
MOVE R0 R2 
MOVE R1 R4 
CMP
BEA 2 // if j = 4, have looked at previous indices, need to reset j + increment i 
MOVE R0 R6 // left shift by j to destroy first j bits of data we have already looked at
MOVE R1 R4
LSL 
MOVE R0 R2
SETI 3// right shift by 3 to get 5 bits of data into correct position 
MOVE R1 R2
LSR
MOVE R0 R2 // R0 stores 5 bit sequence we are looking at, in LSB's
MOVE R1 R7 // R1 stores pattern
CMP 
BNA 1 // if pattern matches, set found and increment dat_mem[33] by one
SETI 1 // IF PATTERN MATCHES
MOVE R5 R2 // update found if we got a match
SETI 1 
MOVE R0 R2 
LSLI 5
MOVE R0 R2
ADDI 1 // R2 now stores 33
MOVE R1 R2
LOAD R0 R1 // R0 now stores dat_mem[33]
ADDI 1
STORE R1 R2 // dat_mem[33] = dat_mem[33] + 1
MOVE R0 R4  // IF PATTERN MISS OR AFTER PATTERN HIT
ADDI 1 
MOVE R4 R2 // j = j + 1
BUN 0 // MUST CHANGE TO BUN FOR FINAL VERSION
SETI 0 // IF J = 4
MOVE R4 R2 // J = 0
MOVE R0 R3
ADDI 1
MOVE R3 R2 // i = i + 1
SETI 1   // load in dat_mem[34]
MOVE R0 R2
LSLI 5 
MOVE R0 R2
ADDI 2
LOAD R0 R2 // r0 = dat_mem[34]
MOVE R1 R5
ADD // r2 = dat_mem[34] + found
MOVE R5 R2
SETI 1 
MOVE R0 R2
LSLI 5
MOVE R0 R2
ADDI 2
STORE R2 R5 //dat_mem[34] = dat_mem[34] + found
SETI 0 
MOVE R5 R2 // reset found
BUN 0 // MUST CHANGE TO BUN FOR FINAL VERSION STAGE ONE WORKS!!!
SETI 0 // POST STAGE ONE RESET OF ALL VALUES
MOVE R3 R2
MOVE R4 R2
MOVE R5 R2
MOVE R6 R2
SETI 1
MOVE R0 R2
LSLI 5
MOVE R0 R2
SUBI 1 
MOVE R1 R2 // R1 now stores 31
MOVE R0 R3
CMP 
BEA 5 // if i is pointing at final byte only count current byte and exit program
LOAD R5 R3 // load current byte we are looking at into R5
MOVE R0 R3
ADDI 1
LOAD R6 R2 // load current byte + 1 we are looking at into R6
MOVE R0 R5 // COMPARE BITS 7-3 OF R5 TO PATTERN
LSRI 3
MOVE R0 R2
MOVE R1 R7
CMP
BNR 4 // if unequal branch 4 lines forward
MOVE R0 R4 // if equal increment count by one
ADDI 1
MOVE R4 R2 
MOVE R0 R5 // COMPARE BITS 6-2 OF R5 TO PATTERN
LSLI 1
MOVE R0 R2
LSRI 3
MOVE R0 R2 
MOVE R1 R7 
CMP
BNR 4 // if unequal branch 4 lines forward 
MOVE R0 R4 // if equal increment count by one
ADDI 1
MOVE R4 R2 
MOVE R0 R5 // COMPARE BITS 5-1 OF R5 TO PATTERN
LSLI 2 
MOVE R0 R2 
LSRI 3 
MOVE R0 R2 
MOVE R1 R7
CMP
BNR 4 // if unequal branch 4 lines forward
MOVE R0 R4 // if equal increment count by one
ADDI 1 
MOVE R4 R2 
MOVE R0 R5 // COMPARE BITS 4-0 OF R5 TO PATTERN
LSLI 3
MOVE R0 R2 
LSRI 3
MOVE R0 R2
MOVE R1 R7
CMP 
BNR 4
MOVE R0 R4
ADDI 1
MOVE R4 R2
MOVE R0 R5 // COMPARE BITS 3-0 OF R5 + BIT 7 OF R7 TO PATTERN
LSLI 4
MOVE R0 R2
LSRI 3
MOVE R1 R2 // R1 now stores (0, 0, 0, b3, b2, b1, b0, 0)
MOVE R0 R6
LSRI 7
MOVE R0 R2 // R0 now stores (0, 0, 0, 0, 0, 0, 0, c7)
XOR
MOVE R0 R2 // R2 now stores (0, 0, 0, b3, b2, b1, b0, c7)
MOVE R1 R7
CMP 
BNR 4 // if unequal branch 4 lines forward
MOVE R0 R4 // if equal increment count by one
ADDI 1 
MOVE R4 R2 
MOVE R0 R5 // COMPARE BITS 2-0 OF R5 + BITS 7-6 OF R6 TO PATTERN
LSLI 5 
MOVE R0 R2 // R0 now stores (b2, b1, b0, 0, 0, 0, 0, 0)
LSRI 3 
MOVE R1 R2 // R1 now stores (0, 0, 0, b2, b1, b0, 0, 0)
MOVE R0 R6
LSRI 6 
MOVE R0 R2 // R0 now stores (0, 0, 0, 0, 0, 0, c7, c6)
XOR 
MOVE R0 R2 // R0 now stores (0, 0, 0, b2, b1, b0, c7, c6)
MOVE R1 R7
CMP 
BNR 4 // if unequal branch 4 lines forward
MOVE R0 R4 // if equal increment count by one
ADDI 1 
MOVE R4 R2 
MOVE R0 R5  // COMPARE BITS 1-0 OF R5 + BITS 7-5 OF R6 TO PATTERN
LSLI 6
MOVE R0 R2
LSRI 3 
MOVE R1 R2 // R1 now stores (0, 0, 0, b1, b0, 0, 0, 0)
MOVE R0 R6 
LSRI 5
MOVE R0 R2 // R0 now stores (0, 0, 0, 0, 0, c7, c6, c5)
XOR 
MOVE R0 R2 
MOVE R1 R7 
CMP 
BNR 4 // if unequal branch 4 lines forward
MOVE R0 R4 // if equal increment count by one
ADDI 1 
MOVE R4 R2 
MOVE R0 R5 // COMPARE BIT 0 OF R5 + BITS 7-4 OF R6 TO PATTERN
LSLI 7
MOVE R0 R2
LSRI 3
MOVE R1 R2 // R1 now stores (0, 0, 0, b0, 0, 0, 0, 0)
MOVE R0 R6
LSRI 4
MOVE R0 R2 // R0 now stores (0, 0, 0, 0, c7, c6, c5, c4)
XOR
MOVE R0 R2
MOVE R1 R7 
CMP
BNR 4 // if unequal branch 4 lines forward
MOVE R0 R4 // if equal increment count by one
ADDI 1 
MOVE R4 R2 
SETI 1  // update dat_mem 35 by count, i by one, clear count and return to top
MOVE R0 R2
LSLI 5
MOVE R0 R2
ADDI 3 // R2 now stores 35 
LOAD R0 R2 // R0 now stores dat_mem[35]
MOVE R1 R4
ADD // R2 now stores dat_mem[35] + count
MOVE R4 R2
SETI 1
MOVE R0 R2 
LSLI 5
MOVE R0 R2
ADDI 3 // R2 now stores 35
STORE R2 R4 // dat_mem[35] = dat_mem[35] + count
MOVE R0 R3
ADDI 1 
MOVE R3 R2 // i = i + 1
SETI 0 
MOVE R4 R2 // count = 0 
BUN 4 // branch to beginning SWITCH TO BUN FOR FINAL SUBMIT
LOAD R5 R3 // load current byte we are looking at into R5
MOVE R0 R5 // COMPARE BITS 7-3 OF R5 TO PATTERN
LSRI 3
MOVE R0 R2
MOVE R1 R7
CMP
BNR 4 // if unequal branch 4 lines forward
MOVE R0 R4 // if equal increment count by one
ADDI 1
MOVE R4 R2 
MOVE R0 R5 // COMPARE BITS 6-2 OF R5 TO PATTERN
LSLI 1
MOVE R0 R2
LSRI 3
MOVE R0 R2 
MOVE R1 R7 
CMP
BNR 4 // if unequal branch 4 lines forward 
MOVE R0 R4 // if equal increment count by one
ADDI 1
MOVE R4 R2 
MOVE R0 R5 // COMPARE BITS 5-1 OF R5 TO PATTERN
LSLI 2 
MOVE R0 R2 
LSRI 3 
MOVE R0 R2 
MOVE R1 R7
CMP
BNR 4 // if unequal branch 4 lines forward
MOVE R0 R4 // if equal increment count by one
ADDI 1 
MOVE R4 R2 
MOVE R0 R5  // COMPARE BITS 4-0 OF R5 TO PATTERN
LSLI 3
MOVE R0 R2 
LSRI 3
MOVE R0 R2
MOVE R1 R7
CMP 
BNR 4
MOVE R0 R4
ADDI 1
MOVE R4 R2
SETI 1
MOVE R0 R2
LSLI 5 // STORE dat_mem[35] + count into dat_mem[35]
MOVE R0 R2
ADDI 3 // R2 now stores 35 
LOAD R0 R2 // R0 now stores dat_mem[35]
MOVE R1 R4
ADD // R2 now stores dat_mem[35] + count
MOVE R4 R2
SETI 1
MOVE R0 R2 
LSLI 5
MOVE R0 R2
ADDI 3 // R2 now stores 35
STORE R2 R4 // dat_mem[35] = dat_mem[35] + count
BUN 7 // raise done flag after finished- SWITCH TO BUN FOR FINAL SUBMIT
